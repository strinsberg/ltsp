(lt64-asm-mod
;; TODO access macro for the head of the list
;; TODO access macro for the start of builtins and defines
;; where global definitions will be added to ensure that they will always
;; be accessible no matter where other parts of the program are pointing
;; to in the environment list.
;; TODO a data object that can be allocated and setup
;; TODO access macros for the data object
;; TODO add and find subroutines

;; Take an address for an env item and load its "fields"
(macro  :!env/item-info :load-lb)
(macro  :!env/item-symbol :push 1 :add :load-lb)
(macro  :!env/item-value :push 2 :add :load-lb)
(macro  :!env/item-next :push 3 :add :load-lb)

;; Take an address for an env item and a value below it and
;; store the value in the specified "field"
(macro  :!env/set-item-info :store-lb)
(macro  :!env/set-item-symbol :push 1 :add :store-lb)
(macro  :!env/set-item-value :push 2 :add :store-lb)
(macro  :!env/set-item-next :push 3 :add :store-lb)

;; Uses the address of a memory "object" large enough to hold an env item.
;; Sets the info, makes it point to NIL for both symbol and value, and
;; zeros the next pointer.
(proc  env/make-item
       :push 0x0f00 :second :!env/set-item-info
       :!NIL :second :!env/set-item-symbol
       :!NIL :second :!env/set-item-value
       :!false :second :!env/set-item-next
       :ret
)
;; The idea is that a linked list of symbols is passed around to every
;; eval/application of subroutines. The idea is that if a new binding
;; scope is introduced then then will add some new cells onto the head
;; of the list that they were given. So an env can grow but the
;; previous scope will point to a further point and won't be affected.
;; If the same function calls multiple functions that have different
;; bindings they will all chain onto the cell that their parent is pointing
;; to and not interfere with each other. So each function application will
;; need to be modified to pass a pointer to the head of the current env
;; with everything else. There is no need to drop any additions, as they
;; will no longer be accessible when their scope ends. Eventually, a garbage
;; collector will reclaim them all for the allocator to reuse.

;; to start with testing can be done by hand creating some symbols that
;; point to actual values, I.e. things like NIL, T, F could be used for this
;; since they need to evaluate like other symbols, but to themselves. All,
;; functions that are in the builtin and special form list will be skipped
;; in evaluation, and everything else will look for a function object that
;; can be applied to it's arguments. Anytime a value is not found an error
;; will be thrown and evaluation of the current form will stop.

;; Takes the address of an env item and adds it after the head in the
;; builtin env. Leaves nothing.
(proc  env/add-define
       :!alloc/env-start
       :push env/add :call
       :!alloc/set-env-start
       :ret
)

;; Takes the address of an env and an env-item and sets the env as the
;; the next of the env-item. Leaves the address of the env-item which is
;; now the head of the env.
(proc  env/add
       :second :!env/set-item-next
       :ret
)

;; Takes a env and a symbol and searches the env to see if it contains
;; the symbol. Leaves the address of the value if the symbol is found,
;; otherwise :!false. Does not leave NIL when a symbol is not found,
;; because this is internal and NIL might be a valid value of a symbol.
;; This subroutine may be used to determine if a symbol exists during
;; evaluation and if it is not found it will likely "throw" an error
;; not return NIL. Symbols that are evaluated and not in the symbol
;; table cannot be allowed.
(proc  env/find
:label env-find-loop
       :!debug-fst
       :!debug-sec
       :!debug-thr
       :!prn-nl
       :first :!false :eq
         :push env-find-not-found :branch
       :first :!env/item-symbol
       :push 2 :nth :eq
         :push env-find-symbol-found :branch
       :!env/item-next
       :push env-find-loop :jump

:label env-find-symbol-found
       :!env/item-value
       ;; fall through
:label env-find-not-found
       :swap :pop
       :ret
)


)
