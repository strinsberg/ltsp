(lt64-asm-mod


;; TODO access macro for the head of the list
;; TODO access macro for the start of builtins and defines
;; where global definitions will be added to ensure that they will always
;; be accessible no matter where other parts of the program are pointing
;; to in the environment list.
;; TODO a data object that can be allocated and setup
;; TODO access macros for the data object
;; TODO add and find subroutines

;; The idea is that a linked list of symbols is passed around to every
;; eval/application of subroutines. The idea is that if a new binding
;; scope is introduced then then will add some new cells onto the head
;; of the list that they were given. So an env can grow but the
;; previous scope will point to a further point and won't be affected.
;; If the same function calls multiple functions that have different
;; bindings they will all chain onto the cell that their parent is pointing
;; to and not interfere with each other. So each function application will
;; need to be modified to pass a pointer to the head of the current env
;; with everything else. There is no need to drop any additions, as they
;; will no longer be accessible when their scope ends. Eventually, a garbage
;; collector will reclaim them all for the allocator to reuse.

;; to start with testing can be done by hand creating some symbols that
;; point to actual values, I.e. things like NIL, T, F could be used for this
;; since they need to evaluate like other symbols, but to themselves. All,
;; functions that are in the builtin and special form list will be skipped
;; in evaluation, and everything else will look for a function object that
;; can be applied to it's arguments. Anytime a value is not found an error
;; will be thrown and evaluation of the current form will stop.




)
