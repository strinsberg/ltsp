(lt64-asm-mod
;; Take a symbol address and load a symbol 'member'
(macro :!sym/info :load-lb)
(macro :!sym/next :push 5 :add :load-lb)

;; Take a symbol address and a value and set in symbol member
(macro :!sym/set-info :store-lb)
(macro :!sym/set-next :push 5 :add :store-lb)

;; Take a symbol address and return the pointer to the member
(macro :!sym/name-ptr :push 1 :add)
(macro :!sym/end-ptr :push 6 :add)

;; Take an address and see if it is a symbol object
(macro :!sym/symbol? :load-lb :push 8 :sr :push 0x02 :eq)

;; Uses top two form addresses (does not pop them) and returns 1 if they are
;; both symbols and 0 otherwise.
(proc  sym/both-symbols?
       :second :!sym/symbol?
         :second :!sym/symbol?
         :and
       :ret
)

;; Take the top value and return F if it is :!false (0), otherwise T.
;; For use when some VM check returns 0 or 1 and the subroutine uses this
;; to return T or F.
;; **NOT** for use to check for falsy values when expecting T, F, or NIL.
(proc  core/bool-to-T-F
       :!false :eq
         :push core-bool-to-T-F-false :branch
       :!T :ret
:label core-bool-to-T-F-false
       :!F :ret
)

;; Takes a symbol address and leaves 1 if it is a false value, 0 otherwise.
(proc  sym/falsy?
       :first :!F :eq
         :swap :!NIL :eq
         :or
       :ret
)

;; Use(don't pop) an address and setup initial symbol data values
(proc  sym/make
       :push 0x0200 :second :!sym/set-info
       :push 0 :second :!sym/set-next
       :push 0 :second :!sym/name-ptr :store-lb
       :ret
)

;; Take an address of a symbol name and a symbol. Copy the first 4
;; words from the name into the symbol's name.
(proc  sym/set-name
       :!init-rcount
:label sym-set-name-loop
       :second :!rcount :add :load-lb
       :second :second :swap
       :!sym/name-ptr :!rcount :add :store-lb
       :unpack :rot :pop
       :!zero? :swap :!zero? :or
         :push sym-set-name-zero-rest :branch
       :!inc-rcount
       :!rcount :push 4 :lt
         :push sym-set-name-loop :branch
       :push sym-set-name-end :jump

:label sym-set-name-zero-rest
       :!inc-rcount
       :!rcount :push 4 :eq
         :push sym-set-name-end :branch
       :push 0
       :second :!sym/name-ptr :!rcount :add :store-lb
       :push sym-set-name-zero-rest :jump
      
:label sym-set-name-end
       :!end-rcount
       :pop :pop
       :ret
)

;; Take a symbol address and print its print name
;; A bit cumbersome without a loop, but it is easy to reason about
;; and probably not much more code.
;; Tested informally and works as expected
(proc sym/print-name
       :!sym/name-ptr
       :!init-rcount
:label sym-print-name-loop
       :first :!rcount :add :load-lb :unpack :rot :pop
       :first :!zero? :push print-name-done-low :branch
       :prnch
       :first :!zero? :push print-name-done :branch
       :prnch
       :!inc-rcount
       :!rcount :push 4 :lt
         :push sym-print-name-loop :branch
       :pop
       :!end-rcount
       :ret

:label print-name-done-low
       :pop
:label print-name-done
       :pop :pop
       :!end-rcount
       :ret
)

;; Takes the addresses of two names (not symbols) and returns 1 if they
;; are equal, otherwise 0.
;; This is for print names only which are a max of 4 words long.
;; Ends when the names have a word that does not equal, they equal but one of
;; the bytes is zero (assumes if the first byte is 0 the second will be too),
;; or when 4 words have been compared.
(proc  sym/names-equal?
       :!init-rcount
:label sym-names-equal-loop
       :second :!rcount :add :load-lb
       :second :!rcount :add :load-lb
       :second :eq :!not
         :push sym-names-equal-false :branch
       :unpack :rot :pop
       :!zero? :swap :!zero? :or
         :push sym-names-equal-end :branch
       :!inc-rcount
       :!rcount :push 4 :lt
         :push sym-names-equal-loop :branch
       ;; fall through when loop counter is 4+ 
:label sym-names-equal-end
       :pop :pop
       :!end-rcount
       :!true
       :ret
:label sym-names-equal-false
       :pop :pop :pop
       :!end-rcount
       :!false
       :ret
)

;; Take the top value and return F if it is :!false (0), otherwise T.
;; For use when some VM check returns 0 or 1 and the subroutine uses this
;; to return T or F.
;; **NOT** for use to check for falsy values when expecting T, F, or NIL.
(proc  sym/bool-to-T-F
       :!false :eq
         :push sym-bool-to-T-F-false :branch
       :!T :ret
:label sym-bool-to-T-F-false
       :!F :ret
)

)
