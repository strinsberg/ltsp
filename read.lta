(lt64-asm-mod
  ;; TODO need to handle EOF when reading
  ;; Also somehow for the top level read to quit the interpreter

  (proc read/repl
    :push read/form :call
    :second :!ch-nl :eq
    :push read-repl-end :branch
    :readln ;; to remove any extra garbage after the first form
    :pop
    :label read-repl-end
    :ret)

  ;; Read a new form from stdin and store the structured data
  ;; Leaves the address of the new form on the stack
  (proc read/form
    :push read/eat-ws :call

    ;; Check for what to read
    :first :!ch-lp :eq
    :push form-is-pair :branch
    :first :push read/digit? :call
    :push form-is-number :branch
    :first :push read/valid-symbol-char? :call
    :push form-is-symbol :branch

    ;; Not a valid character to start a form
    :push read/symbol-start-error :call
    :!nil :ret

    :label form-is-pair
    :pop                               ;; discard the (
    :push read/pair :call
    :push read-form-end :jump

    :label form-is-number
    :push read/number :call
    :push read-form-end :jump

    :label form-is-symbol
    :push read/symbol :call

    :label read-form-end
    ;; cleanup?
    :ret)

  ;; Eats all whitespace in stdin and leaves the first non whitespace
  ;; char on the stack.
  (proc read/eat-ws
    :label eat-ws-loop
    :readch
    :first :push read/whitespace? :call
    :push eat-ws-loop :branch
    :ret)

  ;; Symbol reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Tell if the char on the stack can be in a symbol.
  ;; Ignores chars that can't start a symbol and that would stop a symbol
  ;; because they will be checked somewhere else.
  ;; Leaves 1 for true and 0 for false
  (proc read/valid-symbol-char?
    :push invalid-sym
    :push read/in-char-list? :call
    :!not
    :ret)

  (proc read/whitespace?
    :push whitespace
    :push read/in-char-list? :call
    :ret)

  (proc read/stops-sym?
    :push stops-sym
    :push read/in-char-list? :call
    :ret)

  ;; Takes a char and a symbol for the memory it comes from
  (proc read/in-char-list?
    :!init-rcount
    :label in-char-list-loop
    :first :!add-rcount :load-lb                        ;; List char at counter
    :first :!zero? :push in-char-list-false :branch      ;; Null char ends list
    :push 2 :nth :eq :push in-char-list-true :branch   ;; Check if chars eq
    :!inc-rcount
    :push in-char-list-loop :jump

    :label in-char-list-false
    :pop :pop :pop                     ;; remove end list and list label
    :push 0 :!end-rcount
    :ret

    :label in-char-list-true
    :pop :pop
    :push 1 :!end-rcount
    :ret)

  ;; Read the next symbol and store up to its first 6 chars
  ;; in a newly allocated symbol. Leave stop char on the stack.
  (proc read/symbol
    :push read/symbol-chars :call         ;; read chars into buffer until stop
    :!not
    :push symbol-error-while-reading :branch

    :bfp :push symlist/has-name? :call
    :first :push symbol-already-there :branch

    :pop :push alloc/new-symbol :call
    :bfp :second :push sym/set-name :call

    :label symbol-already-there
    :first :push symlist/add :call
    :ret
    
    :label symbol-error-while-reading
    :!nil
    :ret)

  ;; Takes a start symbol and reads and packs chars of
  ;; a symbol into the buffer
  ;; Leaves T on top if read successfully, otherwise NIL
  ;; Under that it leaves the stopping char
  (proc read/symbol-chars
    :!init-rcount :!inc-rcount             ;; already one char on stack
    :label symbol-chars-loop
    :readch
    :first :push read/valid-symbol-char? :call :!not
    :push symbol-chars-invalid :branch

    ;; else the symbol is valid
    :first :push read/whitespace? :call
    :second :push read/stops-sym? :call
    :or
    :push symbol-chars-stop :branch

    ;; else not done
    :rgrab :push std/odd? :call            
    :push symbol-chars-store-chars :branch

    ;; else even
    :!inc-rcount
    :push symbol-chars-loop :jump

    ;; if odd
    :label symbol-chars-store-chars
    :swap :pack                            ;; first char is not top
    :rgrab :push 2 :div :bufstore          ;; divide counter cause packed
    :!inc-rcount
    :push symbol-chars-loop :jump
    ;; end loop

    ;; if character can't be in a symbol
    :label symbol-chars-invalid
    :push read/symbol-char-error :call
    :!end-rcount
    ;; TODO we need to pop chars from the stack or too many of these will
    ;; eventually overflow it
    :!nil :ret
        
    ;; if stopping
    :label symbol-chars-stop
    :rgrab :push std/odd? :call
    :push symbol-chars-store-last :branch

    ;; else stop char was the first of a pair so null terminate
    :push 0
    :rgrab :push 2 :div :bufstore
    :!end-rcount :!T :ret

    ;; If stop char was the second of a pair
    :label symbol-chars-store-last
    :swap                                  ;; don't pack there is only one
    :rgrab :push 2 :div :bufstore          ;; divide counter still
    :!end-rcount :!T
    :ret)

  ;; Pair reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Read a pair and leave the address on the stack.
  ;; Does not expect anything on the stack.
  (proc read/pair
    :!nil
    :ret)


  ;; Number reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (proc read/digit?
    :push 0
    :ret)

  ;; Read a number and leave the address on the stack.
  ;; Expects the first character on the stack.
  ;; The obvious easy way to do this is to just use wread, dread, or fread
  ;; But since we don't know if it is an int or fixed we can't know
  ;; which to use, in addition to the problem of one of the
  ;; digits being on the stack.
  ;; It should be possible to read them onto the stack and them one at a time
  ;; convert them and sum them together. I.e. loop pop get numerical value
  ;; multiply by 10 * counter add to sum.
  ;; Then create the memory and add the number to it
  ;; There could be routines for removing any decimal past 3 from the input
  ;; before doing a float, since they are fixed point can just convert them
  ;; exactly the same and discard the .
  ;; Maybe keep count of the number of digits while doing it to ensure that
  ;; it won't overflow.
  ;; Use a flag for fixed point to say that it is fixed when creating the type
  ;; and to ensure only 3 digits after the decimal
  ;; gonna have to break it up at least like symbol if not more
  (proc read/number
    :!nil
    :ret)

  ;; Errors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (proc read/symbol-char-error
    :push invalid-symbol-char :prnmem-lb
    :!ch-quote :prnch :first :prnch :!ch-quote :prnch
    :!ch-lp :prnch :wprn :!ch-rp :prnch :!prn-nl
    ;; For the repl errors end the whole read
    ;; For files we would just quit, or do error recovery
    :readln
    :ret)

  (proc read/symbol-start-error
    :push invalid-start-char :prnmem-lb
    :!ch-quote :prnch :first :prnch :!ch-quote :prnch
    :!ch-lp :prnch :wprn :!ch-rp :prnch :!prn-nl
    :readln
    :ret)

)

