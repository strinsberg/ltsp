(lt64-asm-mod

;; TODO need to handle EOF when reading
;; Also somehow for the top level read to quit the interpreter
;; TODO need to think about clearing the stack between all calls to
;; read/repl. This of course assumes that there is no information on
;; the stack before a read. I expect it is empty, we read a form and it
;; should end with only the form address on top which is consumed by
;; eval. If this is not done then over time various things like errors
;; could fill up the stack. Obviously the best thing would be that by the
;; we get back to read/repl there is nothing but the form would be best,
;; but as things get complex that is harder to guarantee. NOTE that the form
;; should be pushed to rstack and the dstack cleared and then the form
;; moved back.

;; Read the next form and discard anything else found.
;; Works with the idea that the line will be ended with a \n. So if
;; after reading a form we find anything else it means that their is
;; more text that needs to be discarded.
(proc  read/repl
       :readch
       :push read/eat-ws :call
       :push read/form :call
       :swap :second :!ERROR :eq
         :swap :!ch-nl :eq
         :or
         :push read-repl-end :branch
       :readln ;; to remove any extra garbage after the first form
       :pop
:label read-repl-end
       ;; TODO clear stack. Form is on top, but rest is garbage?
       ;; Form might also be an error, so eval and print must deal with that
       :ret
)

;; Read a new form from stdin and store the structured data
;; Expects the first character of the form is on the stack
;; Leaves the address of the new form on the stack
(proc  read/form
       :first :!ch-dquote :eq
         :push form-is-string :branch
       :first :!ch-lp :eq
         :push form-is-pair :branch
       :first :push read/starts-number? :call
         :push form-is-number :branch
       :first :!ch-lp :eq
         :push form-is-pair :branch
       :first :!ch-rp :eq
         :push read-form-end-pair :branch
       :first :push read/valid-symbol-char? :call
         :push form-is-symbol :branch
       ;; else not a valid character to start a form
       :first :push read/symbol-start-error :call
       :!ERROR :ret

:label form-is-string
       :push read/string :call
       :ret
:label form-is-number
       :push read/number :call
       :ret
:label form-is-pair
       :push read/pair :call
       :ret
:label read-form-end-pair
       :!end-pair :ret
:label form-is-symbol
       :push read/symbol :call
       :ret
)

;; Eats all white space in stdin and leaves the first non white space
;; char on the stack.
(proc  read/eat-ws
:label read-eat-ws-loop
       :first :push read/whitespace? :call :!not
         :push read-eat-ws-end :branch
       :pop :readch
       :push read-eat-ws-loop :jump
:label read-eat-ws-end
       :ret
)

;; Symbol reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Tell if the char on the stack can be in a symbol.
;; Ignores chars that can't start a symbol and that would stop a symbol
;; because they will be checked somewhere else.
;; Leaves 1 for true and 0 for false
(proc  read/valid-symbol-char?
       :first :!ch-quote :eq
         :second :!ch-dquote :eq
         :or :second :!ch-lbr :eq
         :or :second :!ch-rbr :eq
         :or :second :!ch-lsq :eq
         :or :second :!ch-rsq :eq
         :or :second :!ch-dot :eq
         :or :second :!ch-semi :eq
         :or :!not
       :swap :pop
       :ret
)

;; Take a char on the stack and leave 1 if it is a white space char,
;; otherwise leave 0.
(proc  read/whitespace?
       :first :!ch-space :eq
         :second :!ch-newline :eq
         :or :second :!ch-tab :eq
         :or :second :!ch-comma :eq
         :or
       :swap :pop
       :ret
)

;; Take a char on the stack and leave 1 if it is a symbol stopping char,
;; otherwise leave 0.
(proc  read/stops-sym?
       :first :!ch-lp :eq
         :second :!ch-rp :eq
         :or :second :push read/whitespace? :call
         :or
       :swap :pop
       :ret
)

;; Read the next symbol and store up to its first 6 chars
;; in a newly allocated symbol. Leave stop char on the stack.
(proc  read/symbol
       :push read/symbol-chars :call :!not
         :push symbol-error-while-reading :branch
       :bfp :push symlist/has-name? :call
         :first :push symbol-already-there :branch
       ;; else allocate and setup symbol
       :pop :push alloc/new-symbol :call
       :push sym/make :call
       :bfp :second :push sym/set-name :call
       :first :push symlist/add :call
       :ret

:label symbol-already-there
       :ret
:label symbol-error-while-reading
       :!ERROR
       :ret
)

;; Takes a start symbol and reads and packs chars of
;; a symbol into the buffer
;; Leaves T on top if read successfully, otherwise NIL
;; Under that it leaves the stopping char
(proc  read/symbol-chars
       :!init-rcount :!inc-rcount             ;; already one char on stack
:label symbol-chars-loop
       :readch
       :first :push read/valid-symbol-char? :call :!not
         :push symbol-chars-invalid :branch
       :first :push read/stops-sym? :call
         :push symbol-chars-stop :branch
       :rgrab :push std/odd? :call            
         :push symbol-chars-store-chars :branch
       ;; else don't store and loop
       :!inc-rcount
       :push symbol-chars-loop :jump
       ;; if odd
:label symbol-chars-store-chars
       :swap :pack                            ;; first char is not top
       :rgrab :push 2 :div :bufstore          ;; divide counter cause packed
       :!inc-rcount
       :push symbol-chars-loop :jump
       ;; end loop

:label symbol-chars-invalid
       :push read/symbol-char-error :call
       :!end-rcount
       :!ERROR :ret
:label symbol-chars-stop
       :rgrab :push std/odd? :call
         :push symbol-chars-store-last :branch
       ;; else stop char was the first of a pair so null terminate
       :push 0
       :rgrab :push 2 :div :bufstore
       :!end-rcount :!T :ret
:label symbol-chars-store-last
       :swap                                  ;; don't pack there is only one
       :rgrab :push 2 :div :bufstore          ;; divide counter still
       :!end-rcount :!T :ret
)

;; Pair reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(proc  read/pair
       :pop :readch
       :push read/eat-ws :call
       :push read/form :call
       :first :!end-pair :eq
         :push read-pair-start-nil :branch
       :first :!ERROR :eq
         :push read-pair-read-error :branch
       :push alloc/new-pair :call
       :push pair/make :call
       :rpush :rgrab
       :!pair/set-car
       :rgrab
:label read-pair-list-loop
       :swap
       :push read/eat-ws :call
       :push read/form :call
       :first :!end-pair :eq
         :push read-pair-finish-up :branch
       :first :!ERROR :eq
         :push read-pair-read-error :branch
       :rot :swap
       :push alloc/new-pair :call
       :push pair/make :call
       :first :rot :swap
       :!pair/set-car
       :first :rot
       :!pair/set-cdr
       :push read-pair-list-loop :jump

:label read-pair-start-nil
       :pop :!nil
       :ret
:label read-pair-finish-up
       :pop :pop :readch  ;; means top level pair must always have a newline
       :!nil :rot :!pair/set-cdr
       :rpop
       :ret
:label read-pair-read-error
       :ret
)


;; Number reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Take a char and leave 1 if it can start a number, otherwise 0
(proc  read/starts-number?
       :first :!ch-minus :eq
         :second :!ch-plus :eq
         :or
         :swap :push read/digit? :call
         :or
       :ret
)

;; Take a char and leave 1 if it is a digit and 0 otherwise
(proc  read/digit?
       :first :!ch-zero :!dec :gt
         :swap :!ch-nine :!inc :lt
         :and
       :ret
)

;; Takes a starting character for a number and leaves the address of a form
;; for the given number if it is valid, otherwise NIL.
(proc  read/number
       :push read/number-chars :call
       :first :!ERROR :eq
         :push number-error-while-reading :branch
       :!read-int :eq
         :push read-number-int :branch
       ;; else fixed point
       :push alloc/new-pair :call
       :push number/make-fixed :call
       :ret

:label read-number-int
       :push alloc/new-pair :call
       :push number/make-int :call
       :ret
:label number-error-while-reading
       :ret
)

;; Read the chars of a number and leave the address on the stack.
;; Expects either a digit char or a minus/plus sign on the stack.
;; Leaves T if the number was read successfully and NIL if not.
;; Leaves a double word of the number under the result.
;; If the number is more than 10 digits, or has more than 3 decimal places
;; for fixed numbers, then an error is "thrown". However, it is still
;; possible to give a large 10 digit number and overflow.
(proc  read/number-chars
       :!init-rcount
       :push read/set-number-sign :call
       :rpop :add :rpush ;; add the 0 or 1 from the sign result to the counter
:label read-number-int-loop
       :readch
       :first :!ch-dot :eq
         :push read-number-fixed :branch
       :first :push read/stops-sym? :call
         :second :push read/whitespace? :call
         :or :push read-number-int-build :branch
       :first :push read/digit? :call :!not
         :push read-number-char-error :branch
       :push 10 :!eq-rcount
         :push read-number-size-error :branch
       :!inc-rcount
       :push read-number-int-loop :jump

:label read-number-fixed
       :pop :!init-rcount  ;; pop the dot and start a new counter
:label read-number-fixed-loop
       :readch
       :first :push read/stops-sym? :call
         :second :push read/whitespace? :call
         :or :push read-number-fixed-end
         :branch
       :first :push read/digit? :call :!not
         :push read-number-char-error :branch
       :push 3 :!eq-rcount
         :push read-number-fixed-error :branch
       :rpop :rgrab :second :rpush
         :add :push 10 :eq
         :push read-number-fixed-size-error :branch
       :!inc-rcount
       :push read-number-fixed-loop :jump

:label read-number-fixed-end
       :push 3 :!eq-rcount
         :push read-number-fixed-build :branch
       :!ch-zero :swap
       :!inc-rcount
       :push read-number-fixed-end :jump

:label read-number-fixed-build
       :rpop :rpop :add :!dec
       :swap :rpush  ;; move stop char to rstack and put num size on dstack
       :push read/build-number :call
       :rpop :rot :rot  ;; Put the stop char back under the number
       :!read-fixed
       :ret
:label read-number-int-build
       :rpop :!dec
       :swap :rpush
       :push read/build-number :call
       :rpop :rot :rot
       :!read-int
       :ret
:label read-number-fixed-size-error
       :!end-rcount
:label read-number-size-error
       :push number-too-large :prnmem-lb :!prn-nl
       :!end-rcount
       :!ERROR :ret
:label read-number-char-error
       :push read/number-char-error :call
       :!end-rcount
       :!ERROR :ret
:label read-number-fixed-error
       :push number-too-many-decimals :prnmem-lb :!prn-nl
       :!end-rcount :!end-rcount
       :!ERROR :ret
) ;; end read/number-chars

;; Uses the char on top of the stack, if it is a digit then it pushes a
;; double word 1 under the digit on the dstack.
;; Leaves a 1 or 0 to indicate if there was already a digit or just a sign
;; 1 for digit.
;; If the char is a - or + it pops the char and puts the appropriately
;; signed double word 1 on the stack.
(proc  read/set-number-sign
       :first :!ch-minus :eq
         :push set-number-sign-negative :branch
       :first :!ch-plus :eq
         :push set-number-sign-positive :branch
       :dpush 1 :rot
       :push 1
       :ret
:label set-number-sign-negative
       :pop :dpush -1
       :push 0
       :ret
:label set-number-sign-positive
       :pop :dpush 1
       :push 0
       :ret
)

;; Takes the size of the number, and the reverse digits ending in a 1 or -1
;; for the sign.
;; Leaves the double word of the number on the stack
(proc  read/build-number
       :first :rpush  ;; duplicate size and put it on the rstack as a counter
       :dpush 0  ;; result accumulator
:label read-number-build-loop
       :dswap :swap :!ch-zero :sub ;; make char digit a number
       :second :!rcount :sub ;; get factor exponent
       :push 2 :mult :push build-num-factor :add :dload-lb ;; get factor
       :rot :!->dword :dmult ;; mult by factor
       :rot :rpush :dadd :rpop :rot :rot  ;; accumulate and order properly
       :push 0 :!eq-rcount
         :push read-number-set-sign :branch
       :!dec-rcount
       :push read-number-build-loop :jump
:label read-number-set-sign
       :rot :pop ;; get rid of size
       :dmult ;; set the sign
       :!end-rcount
       :ret
)

;; String Reading ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Takes an opening double quote char and reads a string from stdin. Leaves the
;; head of the read in string object and the next character after the closing
;; double quote.
(proc  read/string
       ;; leave " because it is also the stopping char
       :push read/characters :call
       :readch :swap
       :ret
)

;; Takes a character on the stack and leaves a new string object. If
;; the character is an escape char it will read the next character and
;; leave the escaped character string object.
(proc  read/create-string
       :first :!ch-bslash :eq
         :push read-create-string-escaped :branch
       :push string/create-from-char :call
       :ret

:label read-create-string-escaped
       :pop :readch
       :push read/get-escaped-char-code :call
       :push string/create-escaped :call
       :ret
)

(proc  read/get-escaped-char-code
       :first :!ch-n :eq
         :push read-escaped-newline :branch
       :first :!ch-t :eq
         :push read-escaped-tab :branch
       ;; else just return the character
       :ret

:label read-escaped-newline
       :pop :!ch-newline :ret
:label read-escaped-tab
       :pop :!ch-tab :ret
)

;; Takes the first character read and the stopping character. Leaves the
;; head of the read in string object and the next character after the stopping
;; char is read.
(proc  read/characters
       :readch
       :second :second :eq
         :push read-string-empty :branch
       :push read/create-string :call
       :rpush :rgrab
:label read-string-loop
       :readch
       :!third :second :eq
         :push read-string-end :branch
       :push read/create-string :call
       :first :rot :!string/set-next
       :push read-string-loop :jump

:label read-string-empty
       :pop :pop
       :push string/create :call
       :ret
:label read-string-end
       :pop :pop :pop
       :rpop
       :ret
)

;; Reads everything up to a newline. Leaves a string address with the read
;; line contents and a newline char.
(proc  read/line
       :!ch-newline
       :push read/characters :call
       :!ch-newline :swap
       :ret
)

;; Errors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(proc  read/symbol-char-error
       :push invalid-symbol-char :prnmem-lb
       :!ch-quote :prnch :first :prnch :!ch-quote :prnch
       :!ch-lp :prnch :wprn :!ch-rp :prnch :!prn-nl
       :ret
)

(proc  read/symbol-start-error
       :push invalid-start-char :prnmem-lb
       :!ch-quote :prnch :first :prnch :!ch-quote :prnch
       :!ch-lp :prnch :wprn :!ch-rp :prnch :!prn-nl
       :ret
)

(proc  read/number-char-error
       :push invalid-number-char :prnmem-lb
       :!ch-quote :prnch :first :prnch :!ch-quote :prnch
       :!ch-lp :prnch :wprn :!ch-rp :prnch :!prn-nl
       :ret
)

)

