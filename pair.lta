(lt64-asm-mod

;; Take an address and load the 'field'
(macro :!pair/info :load-lb)
(macro :!pair/car :push 1 :add :load-lb)
(macro :!pair/cdr :push 2 :add :load-lb)

;; Take an address and a value and set the 'field'
(macro :!pair/set-info :store-lb)
(macro :!pair/set-car :push 1 :add :store-lb)
(macro :!pair/set-cdr :push 2 :add :store-lb)

;; Take a pair and check its type
(macro :!pair/pair? :load-lb :push 8 :sr :push 0x00 :eq)
(macro :!pair/dotted? :load-lb :push 8 :sr :push 0x01 :eq)

;; Uses an address for pair size memory and sets it up.
(proc  pair/make
       :push 0x0000 :second :!pair/set-info
       :!NIL :second :!pair/set-car
       :!NIL :second :!pair/set-cdr
       :ret
)

;; Uses an address for pair size memory and sets it up as a dotted-pair.
(proc  pair/make-dotted
       :push 0x0100 :second :!pair/set-info
       :!NIL :second :!pair/set-car
       :!NIL :second :!pair/set-cdr
       :ret
)

;; Take an address of a pair and set it as a pair.
(proc  pair/set-pair
       :first :!pair/info
       :unpack :swap :pop :push 0x00 :swap :pack
       :swap :!pair/set-info
       :ret
)

;; Take an address of a pair and set it as a dotted-pair.
(proc  pair/set-dotted
       :first :!pair/info
       :unpack :swap :pop :push 0x01 :swap :pack
       :swap :!pair/set-info
       :ret
)

;; Takes an address for the cdr, and an address for the
;; car and creates a new pair. Leaves the address of the new pair.
(proc  pair/create
       :push alloc/new-pair :call
       :second :push eval/atom? :call
         :push pair-create-dotted :branch
       :push 0x0000 :second :!pair/set-info
:label pair-create-set-values
       :swap :second :!pair/set-cdr
       :swap :second :!pair/set-car
       :ret
:label pair-create-dotted
       :push 0x0100 :second :!pair/set-info
       :push pair-create-set-values :jump
)

;; Takes a stack with values of a list in reverse order, ended by a 0.
;; Leave an address to the start of containing those values.
(proc  pair/create-list
:label create-list-loop
       :second :!zero?
         :push create-list-end :branch
       :push pair/create :call
       :push create-list-loop :jump
:label create-list-end
       :swap :pop  ;; remove 0
       :ret
)


)
