(lt64-asm-mod
  ;; For the symbol list that will track all allocated symbols
  ;; The use of this is to be able to reuse symbols if we see it a second
  ;; time. It also makes EQ easy as any symbols will be the same if their
  ;; addresses are the same. A separate symbol table will keep track of the
  ;; actual symbols that are in the environment and point to the symbol itself
  ;; in the list. For GC the symbol table will be traversed (after reads) and
  ;; set all in scope symbols as ok and then the GC can traverse the symlist
  ;; and remove (in linked list fashion) the symbols that are no longer in
  ;; use.

  (macro :!symlist/head :push 3 :load)
  (macro :!symlist/set-head :push 3 :store)

  ;; Take a symbol address on the top of the stack insert that symbol between
  ;; symlist head and the first symbol in the list (or nil).
  (proc symlist/add
    :!symlist/head :second :!sym/set-next
    :!symlist/set-head
    :ret)
  
  ;; Given the address of a symbol name check if it equals any of the
  ;; stored symbol names. Put the address of the symbol or nil (0)
  (proc symlist/has-name?
    ;;for each symbol in the list
    ;;check if the strings at each mem location are equal
    :ret)
)
