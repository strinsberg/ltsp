(lt64-asm-prog
  (static
    ;; buitlin symbols
    ;; Are setup manually assuming memory starts at 3
    ;; Do not put anything before these.
    ;; A sym is 6 words long. And each word for the name is ordered low
    ;; byte high byte so abcd is ba dc
    ;;              type    print-name                   next
    (:word NIL    6 0x0200  0x494e 0x004c 0x0000 0x0000  0x00)
    (:word T      6 0x0200  0x0054 0x0000 0x0000 0x0000  0x03)
    (:word F      6 0x0200  0x0046 0x4c00 0x0000 0x0000  0x09)
    (:word car    6 0x0200  0x6163 0x0072 0x0000 0x0000  0x0F)
    (:word cdr    6 0x0200  0x6463 0x0072 0x0000 0x0000  0x15)
    (:word cons   6 0x0200  0x6f63 0x736e 0x0000 0x0000  0x1b)
    (:word atom?  6 0x0200  0x7461 0x6d6f 0x003f 0x0000  0x21)
    (:word eq?    6 0x0200  0x7165 0x003f 0x0000 0x0000  0x27)
    (:word quote  6 0x0200  0x7571 0x746f 0x0065 0x0000  0x2d)
    (:word cond   6 0x0200  0x6f63 0x646e 0x0000 0x0000  0x33)
    ;; :!builtin-syms-start should point to 6 above the last next val
    ;; currently 0x39. Add 6 for every addition

    ;; strings
    (:str prompt "ltsp> ")
    (:str nil-sym "NIL")
    (:str T-sym "T")
    (:str F-sym "F")

    ;; Number sets
    (:dword build-num-factor 10
            1 10 100 1000 10000 100000             ;; 10^0 - 10^5
            1000000 10000000 100000000 1000000000) ;; 10^6 - 10^9
            
    ;; error text
    (:str invalid-start-char "*** Error: Char cannot start a symbol: ")
    (:str invalid-symbol-char "*** Error: Char cannot be in a symbol: ")
    (:str invalid-number-char "*** Error: Char cannot be in a number: ")
    (:str number-too-large
    "*** Error: Numbers are limited to a max of 10 digits, including decimal digits")
    (:str number-too-many-decimals
    "*** Error: Fixed point numbers are limited to a maximum of 3 decimal digits")
  )
    
  (main
    ;; Setup the free memory for our dotted pair memory heap
    :push alloc/setup-fm :call

    ;; Start REPL
    :label main-loop
    :push prompt :prnmem-lb
    :push read/repl :call
    :push eval/form :call
    :push print/form :call
    :!prn-nl :!prn-nl
    :push main-loop :jump

    ;; Quit. Needs some check in the repl to jump to here.
    ;; Right now infinite loop requires control c
    :halt)

  ;; Constants and flags
  ;; All should be invalid addresses for in memory objects, not guaranteed yet
  (macro :!false :push 0)
  (macro :!true :push 1)
  (macro :!error :push 2)
  (macro :!end-pair :push -1)
  (macro :!read-int :push -2)
  (macro :!read-fixed :push -3)

  ;; Builtin Symbol Addresses
  (macro :!nil :push 0x03)
  (macro :!NIL :push 0x03)
  (macro :!T :push 0x09)
  (macro :!F :push 0x0F)
  (macro :!CAR :push 0x15)
  (macro :!CDR :push 0x1b)
  (macro :!CONS :push 0x21)
  (macro :!ATOM? :push 0x27)
  (macro :!EQ? :push 0x2d)
  (macro :!QUOTE :push 0x33)
  (macro :!COND :push 0x39)
  (macro :!builtin-syms-start :push 0x39)

  ;; Characters
  (macro :!ch-nl :push 0x0A)
  (macro :!ch-tab :push 0x09)
  (macro :!ch-newline :push 0x0A)
  (macro :!ch-space :push 0x20)
  (macro :!ch-dquote :push 0x22)
  (macro :!ch-quote :push 0x27)
  (macro :!ch-lp :push 0x28)
  (macro :!ch-rp :push 0x29)
  (macro :!ch-plus :push 0x2B)
  (macro :!ch-comma :push 0x2C)
  (macro :!ch-minus :push 0x2D)
  (macro :!ch-dot :push 0x2E)
  (macro :!ch-zero :push 0x30)
  (macro :!ch-nine :push 0x39)
  (macro :!ch-semi :push 0x3B)
  (macro :!ch-lsq :push 0x5B)
  (macro :!ch-rsq :push 0x5D)
  (macro :!ch-lbr :push 0x7B)
  (macro :!ch-rbr :push 0x7D)

  ;; Debugging
  (macro :!debug-char :first :prnch :push 10 :prnch)
  (macro :!debug-fst :first :wprn :push 10 :prnch)
  (macro :!debug-sec :second :wprn :push 10 :prnch)
  (macro :!debug-thr :push 2 :nth :wprn :push 10 :prnch)
  (macro :!debug-rs :rgrab :wprn :push 10 :prnch)
  
  ;; Includes
  (include "read.lta")
  (include "eval.lta")
  (include "print.lta")
  (include "symbol.lta")
  (include "symlist.lta")
  (include "allocate.lta")
  (include "number.lta")
  (include "pair.lta")
  (include "stdlib" odd?)
)
