(lt64-asm-prog
  (static
    ;; strings
    (:str prompt "ltsp> ")
    (:str nil-sym "NIL")

    ;; Char sets
    (:word whitespace 6 0x09 0x0A 0x0D 0x20 0x2C 0x00) ;; \t \n cr space , 
    (:word invalid-sym 9 0x22 0x27 0x2E 0x3B
                         0x5B 0x5D 0x7B 0x7D 0x00) ;; " ' . ; [ ] { }
    (:word stops-sym 3 0x28 0x29 0x00) ;; ( )  And whitespace

    ;; error text
    (:str invalid-start-char "*** Error: Char cannot start a symbol: ")
    (:str invalid-symbol-char "*** Error: Char cannot be in a symbol: ")
  )
    
  (main
    ;; Setup the free memory for our dotted pair memory heap
    :push alloc/setup-fm :call

    ;; Start REPL
    :label main-loop
    :push prompt :prnmem-lb
    :push read/repl :call
    :push eval/eval-form :call
    :push print/form :call
    :!prn-nl :!prn-nl
    :push main-loop :jump

    ;; Quit. Needs some check in the repl to jump to here.
    ;; Right now infinite loop requires control c
    :halt)

  (macro :!nil :push 0x000)
  (macro :!T :push 0x001)
  (macro :!ch-nl :push 0x0A)
  (macro :!ch-quote :push 0x27)
  (macro :!ch-lp :push 0x28)
  (macro :!ch-rp :push 0x29)
  (macro :!ch-dot :push 0x2E)
  (macro :!ch-zero :push 0x30)
  (macro :!ch-nine :push 0x39)

  (macro :!debug-char :first :prnch :push 10 :prnch)
  (macro :!debug-fst :first :wprn :push 10 :prnch)
  (macro :!debug-sec :second :wprn :push 10 :prnch)
  
  (include "read.lta")
  (include "eval.lta")
  (include "print.lta")
  (include "allocate.lta")
  (include "symbol.lta")
  (include "symlist.lta")
  (include "stdlib" odd?)
)
