(lt64-asm-mod

;; Take the address of a form on top of the stack and print it
(proc  print/form
       :first :!number/int?
         :push print-form-int :branch
       :first :!number/fixed?
         :push print-form-fixed :branch
       :first :push string/string? :call
         :push print-form-string :branch
       :first :!pair/pair?
         :push print-form-pair :branch
       :first :!pair/dotted?
         :push print-form-dotted :branch
       :first :!proc/procedure?
         :push print-form-procedure :branch
       :first :!sub/subroutine?
         :push print-form-subroutine :branch
       ;; else symbol
       :push sym/print-name :call
       :ret

:label print-form-int
       :!number/value
       :dprn :ret
:label print-form-fixed
       :!number/value
       :fprn :ret
:label print-form-string
       :push print/string :call
       :ret
:label print-form-pair
       :push print/pair :call
       :ret
:label print-form-dotted
       :push print/dotted :call
       :ret
:label print-form-procedure
       :push print/procedure :call
       :ret
:label print-form-subroutine
       :push print/subroutine :call
       :ret
)

;; Takes the address of a pair and prints it as an s-expression.
(proc  print/pair
       :!ch-lp :prnch
:label print-pair-loop
       :first :!pair/car :push print/form :call
       ;:!prn-nl
       ;:first :wprn :!prn-nl
       ;:first :!pair/car :wprn :!prn-nl
       ;:first :!pair/cdr :wprn :!prn-nl
       :first :!pair/dotted?
         :push print-pair-end-dotted :branch
       :!pair/cdr
       :first :!NIL :eq
         :push print-pair-end :branch
       :!ch-space :prnch
       :push print-pair-loop :jump

:label print-pair-end
       :pop
       :!ch-rp :prnch
       :ret
:label print-pair-end-dotted
       :!pair/cdr
       :first :!NIL :eq
         :push print-pair-end :branch
       :!ch-space :prnch
       :push print/form :call
       :!ch-rp :prnch
       :ret
)

;; Takes the address of a dotted pair and prints it as (car . cdr)
(proc  print/dotted
       :!ch-lp :prnch
       :first :!pair/car :push print/form :call
       :first :!pair/cdr :!NIL :eq
         :push print-dotted-cdr-nil :branch
       :!ch-space :prnch :!ch-dot :prnch :!ch-space :prnch
       :!pair/cdr :push print/form :call
       :!ch-rp :prnch
       :ret

:label print-dotted-cdr-nil
       :pop
       :!ch-rp :prnch
       :ret
)

;; takes the address of a procedure and prints it #((params) body)
(proc  print/procedure
       :!ch-hash :prnch
       :!ch-lp :prnch
       :first :!proc/params :push print/form :call
       :!ch-space :prnch
       :first :!proc/body :push print/form :call
       :!ch-rp :prnch
       :pop
       :ret
)

;; takes the address of a procedure and prints some details
(proc  print/subroutine
       :!ch-hash :prnch
       :first :!sub/symbol
       :push print/form :call
       :!ch-lbr :prnch
       :!sub/label :wprn
       :!ch-rbr :prnch
       :ret
)

;; takes the address of a string and prints it without double quotes.
(proc  print/string
       :!ch-dquote :prnch
       :push print/string-readable :call
       :!ch-dquote :prnch
       :ret
)

;; takes the address of a string and print the contents in a way that they
;; could be read back in.
(proc  print/string-readable
:label print-string-readable-loop
       :first :!NIL :eq
         :push print-string-readable-end :branch
       :first :push print/char-readable :call
       :!string/next
       :push print-string-readable-loop :jump

:label print-string-readable-end
       :pop :ret
)

;; takes a string object and prints the char in a way that it could be read
;; back in. I.e. \n prints as \n and not an actual newline.
(proc  print/char-readable
       :first :!string/escaped?
         :push print-char-readable-escaped :branch
       :!string/char
       :first :!zero?
         :push print-char-readable-null :branch
       :prnch
       :ret

:label print-char-readable-escaped
       :!string/char
       :first :!zero?
         :push print-char-readable-null :branch
       :!ch-bslash :prnch
       :first :!ch-newline :eq
         :push print-char-readable-newline :branch
       :first :!ch-tab :eq
         :push print-char-readable-tab :branch
       ;; is a printable char so just print it
       :prnch
       :ret

:label print-char-readable-newline
       :pop :!ch-n :prnch :ret
:label print-char-readable-tab
       :pop :!ch-t :prnch :ret
:label print-char-readable-null
       :pop :ret
)

;; takes the address of a string and print the contents.
(proc  print/string-printable
:label print-string-printable-loop
       :first :!NIL :eq
         :push print-string-printable-end :branch
       :first :!string/char :prnch
       :!string/next
       :push print-string-printable-loop :jump

:label print-string-printable-end
       :pop :ret
)

)

