(lt64-asm-mod
;; TODO there is no error checking or handling in the eval and apply
;; subroutines. Currently most errors are in the reading phase, but
;; as we go on at least a few errors will be introduced in different
;; places and all the code that calls an eval or an application will need
;; to either handle or pass on errors when they happen.
;; TODO each subroutine needs some documentation to at least say what
;; each one expects on the stack and what each one leaves on the stack.
;; And with the addition of ENV they all might need adjustment to their
;; documentation.

;; Takes an env and then a form to evaluate
;; Leaves a (possibly new) env and the result of evaluating the form
(proc  eval/form
       :second :push number/number? :call
         :!third :!proc/procedure?
         :or :!third :!sub/subroutine?
         :or :push eval-form-identity :branch
       :second :push eval/atom? :call
         :push eval-form-symbol :branch
       ;; else is list/function application
       :push eval/apply :call
       :ret
:label eval-form-identity
       :ret
:label eval-form-symbol
       :second :second
       :push env/find :call
       :first :!false :eq
         :push eval-form-symbol-undefined :branch
       :rot :pop :swap
       :ret
:label eval-form-symbol-undefined
       :pop
       :push symbol-unfound-error :prnmem-lb
       :swap :push sym/print-name :call :!prn-nl
       :!ERROR :swap :ret
       ;; This is still unhandled in all of the other evals and possibly print
)

;; Takes and env and  an address of a pair and applies the car
;; of the pair as a function on the cdr. Leaves the env and the
;; result's address.
(proc  eval/apply
       :second :!pair/car
       :first :push eval/special-form? :call
         :push eval-apply-special-form :branch
       ;; else it should eval to a proc or subroutine to be applied
       :swap :push eval/form :call
       :second :!ERROR :eq
         :push eval-apply-error-end :branch
       :second :!proc/procedure?
         :push eval-apply-procedure :branch
       :second :!sub/subroutine?
         :push eval-apply-subroutine :branch
       ;; it is not a proc/subroutine and cannot be applied
       :push cannot-apply :prnmem-lb
       :second :push debug-form :call
       :rot :pop :rot :pop
       :!ERROR :swap
       :ret

:label eval-apply-special-form
       :push eval/apply-special :call
       :ret
:label eval-apply-procedure
       :rot :!pair/cdr :swap  ;; get the function arguments from the pair
       :push eval/list :call
       :second :!ERROR :eq
         :push eval-apply-error-end :branch
       :push eval/apply-procedure :call
       :ret
:label eval-apply-subroutine
       :rot :!pair/cdr :swap
       :push eval/list :call
       :second :!ERROR :eq
         :push eval-apply-error-end :branch
       ;; subroutines store the address of their proc label, so call it
       :rot :!sub/label :call
       :ret
:label eval-apply-error-end
       :ret
)

;; Takes an env and a list of forms and leaves the env and a new list with
;; all the evaluated forms. Basically (map eval args).
(proc  eval/list
       :push 0  ;; sentinal stopping value
       :rot :rot
       ;; Eval each list element and put result under env and list
:label eval-list-eval
       :second :!NIL :eq
         :push eval-list-end :branch
       :second :!pair/car :swap
       :push eval/form :call
       :second :!ERROR :eq
         :push eval-list-arg-error :branch
       :rot :!pair/cdr :swap
       :push eval-list-eval :jump

:label eval-list-end
       :rpush
       :push pair/create-list :call
       :rpop
       :ret
:label eval-list-arg-error
       :!third :!zero?
         :push eval-list-error-end :branch
       :rot :pop
       :push eval-list-arg-error :jump
:label eval-list-error-end
       :rot :pop :ret
)


;; Special forms ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(proc  eval/special-form?
       :first :!COND :eq
         :second :!DEFINE :eq
         :or :second :!LET :eq
         :or :second :!LAMBDA :eq
         :or :second :!QUOTE :eq
         :or
       :swap :pop
       :ret
)

;; Takes a the address of a special form symbol and the
;; pair for the function application of that symbol and applies the
;; appropriate function to the arguments.
;; Leaves the result's address.
(proc  eval/apply-special
       :first :!QUOTE :eq
         :push eval-apply-basic-quote :branch
       :first :!COND :eq
         :push eval-apply-special-cond :branch
       :first :!DEFINE :eq
         :push eval-apply-special-define :branch
       :first :!LET :eq
         :push eval-apply-special-let :branch
       :first :!LAMBDA :eq
         :push eval-apply-special-lambda :branch
       ;; Else it was not a special form. 
       ;; this is a panic because it should be unreachable
       :push not-special-error :prnmem-lb
       :push sym/print-name :call :!prn-nl
       :halt

:label eval-apply-basic-quote
       :pop :swap :!pair/cdr :!pair/car
       :swap
       :ret
:label eval-apply-special-cond
       :pop :swap :!pair/cdr :swap
       :push eval/apply-cond :call
       :ret
:label eval-apply-special-define
       :pop :push eval/apply-define :call
       :ret
:label eval-apply-special-let
       :pop :push eval/apply-let :call
       :ret
:label eval-apply-special-lambda
       :pop :push eval/apply-lambda :call
       :ret
)

;; Takes an env and the list of condition, action pairs from a cond form
;; Leaves the result of the first action that evaluated as not NIL or F.
;; If no condition evaluates to a truthy value leaves NIL
(proc  eval/apply-cond
:label eval-apply-cond-pairs-loop
       :second :!NIL :eq
         :push eval-apply-cond-none :branch
       :second :!pair/car :!pair/car :swap
       :push eval/form :call
       :second :!ERROR :eq
         :push eval-apply-cond-pairs-error :branch
       :swap :push sym/falsy? :call :!not
         :push eval-apply-cond-true :branch
       ;; else the condition was not met
       :swap :!pair/cdr :swap
       :push eval-apply-cond-pairs-loop :jump

:label eval-apply-cond-none
       :ret
:label eval-apply-cond-true
       :swap :!pair/car ;; the condition, action pair
       :!pair/cdr :!pair/car ;; the action
       :swap :push eval/form :call
       :ret
:label eval-apply-cond-pairs-error
       :rot :pop :ret
)


;; Takes an env and a define form. Add the binding to the front of the
;; builtin bindings. Leaves T if succesful, otherwise :!ERROR.
(proc  eval/apply-define
       :second :!pair/cdr :!pair/car
       :first :!sym/symbol? :!not
         :push eval-apply-define-not-symbol :branch
       :first :!third
       :push env/find :call :!false :eq :!not
         :push eval-apply-define-already-here :branch
       :rot :!pair/cdr :!pair/cdr :!pair/car
       :rot :push eval/form :call
       :second :!ERROR :eq
         :push eval-apply-define-error :branch
       :!third :!third
       :push env/add-define :call
       :second :!proc/procedure?
         :push eval-apply-define-update-proc-env :branch
       :swap :pop :swap :pop
       :!T :swap
       :ret

:label eval-apply-define-not-symbol
       :push invalid-define-target :prnmem-lb
       :push debug-form :call
       :swap :pop :!ERROR :swap :ret
:label eval-apply-define-already-here
       :push symbol-already-defined :prnmem-lb
       :push sym/print-name :call :!prn-nl
       :swap :pop :!ERROR :swap :ret
:label eval-apply-define-update-proc-env
       :!third :!third :first :!proc/env
       :push env/add :call
       :rot :!proc/set-env
       :!T :swap
       :ret
:label eval-apply-define-error
       :rot :pop :ret
)

;; Takes an env and a let form and evaluates the body with all local bindings
;; made. Leaves the parent env and the result.
(proc  eval/apply-let
       :swap :second  ;; duplicate env for local use
       :second :!pair/cdr :!pair/car
       :swap
       :push eval/add-let-bindings :call
       :second :!ERROR :eq
         :push eval-apply-let-binding-error :branch
       :swap :!pair/cdr :!pair/cdr :!pair/car
       :swap
       :push eval/form :call
       :pop :swap  ;; pop local env and put result under parent env
       :ret
:label eval-apply-let-binding-error
       :rot :pop :rot :pop
       :ret
)

;; Takes an env and a list of bindings and leaves the updated env. If there
;; is an evaluation error then also leaves an ERROR under the env.
(proc  eval/add-let-bindings
:label eval-add-let-bindings-loop
       :second :!NIL :eq
         :push eval-add-let-bindings-end :branch
       :second :!pair/car
       :first :!pair/car
       :swap :!pair/cdr :!pair/car
       :rot
       :push eval/form :call
       :second :!ERROR :eq
         :push eval-add-let-bindings-error :branch
       :push env/add :call
       :swap :!pair/cdr :swap
       :push eval-add-let-bindings-loop :jump

:label eval-add-let-bindings-end
       :swap :pop :ret
:label eval-add-let-bindings-error
       :rot :pop :rot :pop
       :ret
)

;; Takes an env and a lambda form and leaves a procedure with a closure
;; around the environment that it was declared in.
(proc  eval/apply-lambda
       :second :!pair/cdr :!pair/car
       :rot :!pair/cdr :!pair/cdr :!pair/car
       :!third ;; duplicate the env to be consumed for setting closure env

       ;; allocate memory, make it a proc
       :push alloc/new-procedure :call
       :push proc/make :call
       :swap :second :!proc/set-env
       :swap :second :!proc/set-body
       :swap :second :!proc/set-params
       :swap
       :ret
)

;; Apply procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Takes an env and the address of a list of evaluated procedure arguments and
;; the address of the procedure to apply to those arguments.
;; Leaves the env and the result of the application.
(proc  eval/apply-procedure
       :swap
       :!third :!proc/params
       :!fourth :!proc/env
       :push eval/bind-proc-args :call
       :!third :!proc/body :swap
       :push eval/form :call
       :pop :swap :rot :pop
       :ret
)

;; Takes the proc env, a list of params, a list of evaluated arguments,
;; and the parent env and adds bindings to the procedures env. Leaves the
;; updated env and the parent env.
(proc  eval/bind-proc-args
:label eval-bind-proc-args-loop
       :second :!NIL :eq
         :!fourth :!NIL :eq
         :or :push eval-bind-proc-args-end :branch
       :second :!pair/car
       :!fourth :!pair/car
       :rot
       :push env/add :call
       :rot :!pair/cdr
       :rot :!pair/cdr
       :rot
       :push eval-bind-proc-args-loop :jump

:label eval-bind-proc-args-end
       :swap :pop :swap :pop
       :ret
)

;; Eval helpers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Take an address and check if it is atom
(proc  eval/atom?
       :first :!sym/symbol?
         :second :!number/int?
         :or :second :!number/fixed?
         :or
       :swap :pop
       :ret
)

)

